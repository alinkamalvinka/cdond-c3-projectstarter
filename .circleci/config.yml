version: 2.1

orbs:
  slack: circleci/slack@4.0

slack_fail: &slack_fail
  post-steps:
    - slack/notify:
        custom: |
          {
            "text": "",
            "blocks": [
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": "‚ùå *Failure* #${CIRCLE_BUILD_NUM} `${CIRCLE_PROJECT_REPONAME}` on `${CIRCLE_BRANCH}`"
                }
              },
              {
                "type": "actions",
                "elements": [
                  {
                    "type": "button",
                    "text": {
                      "type": "plain_text",
                      "text": "View Job"
                    },
                    "url": "${CIRCLE_BUILD_URL}"
                  }
                ]
              }
            ]
          }
        event: always

defaults: &defaults
  docker:
    - image: circleci/node:13.8.0

#commands:
#  destroy-environment:
#    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
#    parameters:
#      # Add parameter
#    steps:
#      - run:
#          name: Destroy environments
#          when: on_fail
#          command: |
#            # Your code here
#            aws cloudformation delete-stack --stack-name prod-${CIRCLE_WORKFLOW_ID}
#
#  revert-migrations:
#    description: Revert the last migration if successfully run in the current workflow.
#    parameters:
#      # Add parameter here
#    steps:
#      - run:
#          name: Revert migrations
#          # Add when this will run
#          command: |
#            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
#            SUCCESS = 1
#            if(( $SUCCESS==1 ));
#            then
#            #  cd ~/project/backend
#            #  npm install
#            #  Add revert code here. You can find this in the Getting Started section.
#              exit 1
#            fi
            
jobs:
  build-frontend:
    <<: *defaults
    steps:
      - checkout
      - run:
          name: Build front-end
          command: |
            # Your code here
            cd frontend; npm i; npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build-{{ checksum "frontend/package.json" }}

  build-backend:
    <<: *defaults
    steps:
      - checkout
      - run:
          name: Back-end build
          command: |
             # Your code here
             cd backend; npm i; npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build-{{ checksum "backend/package.json" }}

  test-frontend:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          keys:
            - frontend-build-{{ checksum "frontend/package.json" }}
      - run:
          name: test frontend
          command: cd frontend; npm run test

  test-backend:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          keys:
            - backend-build-{{ checksum "backend/package.json" }}
      - run:
          name: test backend
          command: cd backend; npm run test

  scan-frontend:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          keys:
            - frontend-build-{{ checksum "frontend/package.json" }}
      - run:
          name: test vulnerabilities
          command: cd frontend; npm audit --audit-level=critical

  scan-backend:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          keys:
            - backend-build-{{ checksum "backend/package.json" }}
      - run:
          name: test backend vulnerabilities
          command: cd backend; npm audit --audit-level=critical


  deploy-infrastructure:
    docker:
      - image: alpine:latest
    steps:
      - checkout
      - run:
          name: install deps
          command: |
            apk add tar py-pip;  pip install awscli
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text >> .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure


  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: [95:b9:2c:2e:77:4d:dd:d7:8d:72:62:65:fc:21:5a:20]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            # Your code here
            apk add --update ansible
      - run:
          name: Configure server
          command: |
            # Your code here
            ansible-playbook -i ~/project/.circleci/ansible/inventory.txt ~/project/.circleci/ansible/configure-server.yml
          no_output_timeout: 30m
#       Here's where you will add some code to rollback on failure

  run-migrations:
    <<: *defaults
    steps:
      - checkout
      - run:
          name: Run migrations
          no_output_timeout: 10m
          command: |
            cd backend; npm i; npm run migrations | tee migrations_result.txt
      - run:
          name: get and send migrations result to memstash
          command: |
            if cat migrations_result.txt | grep "has been executed successfully" ; then
              curl -H "Content-Type: text/plain" -H "token: bf81b6bf-c531-4f6a-aa01-5e5cc419ceff" \
                          --request PUT --data "sucess" \
                          https://api.memstash.io/values/migration
            else
              curl -H "Content-Type: text/plain" -H "token: bf81b6bf-c531-4f6a-aa01-5e5cc419ceff" \
                          --request PUT --data "fail" \
                          https://api.memstash.io/values/migration
            fi

#            _${CIRCLE_WORKFLOW_ID}
#      Here's where you will add some code to rollback on failure


  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Get backend url
          command: |
            # your code here
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
      - run:
          name: Deploy frontend objects
          command: |
            # your code here
      # Here's where you will add some code to rollback on failure
#
#  deploy-backend:
#    docker:
#      # Docker image here that supports Ansible
#    steps:
#      # Checkout code from git
#      # Add ssh keys with fingerprint
#      # attach workspace
#      - run:
#          name: Install dependencies
#          command: |
#            # your code here
#      - run:
#          name: Deploy backend
#          command: |
#            # your code here
#      # Here's where you will add some code to rollback on failure
#
#  smoke-test:
#    docker:
#      # Lightweight Docker image
#    steps:
#      # Checkout code from git
#      - run:
#          name: Install dependencies
#          command: |
#            # your code here
#      - run:
#          name: Get backend url
#          command: |
#            # your code here
#      - run:
#          name: Backend smoke test.
#          command: |
#            # your code here
#      - run:
#          name: Frontend smoke test.
#          command: |
#            # your code here
#      # Here's where you will add some code to rollback on failure
#
#  cloudfront-update:
#    docker:
#      # Docker image here that supports AWS CLI
#    steps:
#      # Checkout code from git
#      - run:
#          name: Install dependencies
#          command: |
#            # your code here
#      - run:
#          name: Update cloudfront distribution
#          command: |
#            # your code here
#      # Here's where you will add some code to rollback on failure
#
#cleanup:
#    docker:
#      # Docker image here
#    steps:
#      # Checkout code from git
#      - run:
#          name: Get old stack workflow id
#          command: |
#            # your code here
#            export OldWorkflowID="the id here"
#            export STACKS=[] #put the list of stacks here
#      - run:
#          name: Remove old stacks and files
#          command: |
#            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#            then
#              # your code here
#            fi
#

workflows:
  default:
    jobs:
#      - build-frontend
#      - build-backend
#          context:
#            - slack_secrets
#          <<: *slack_fail
#      - test-frontend:
#          requires: [build-frontend]
#      - test-backend:
#          requires: [build-backend]
#      - scan-backend:
#          requires: [build-backend]
#      - scan-frontend:
#          requires: [build-frontend]
      - deploy-infrastructure
#          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
#          filters:
#            branches:
#              only: [test-feature-branch]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
#      - deploy-frontend:
#          requires: [run-migrations]
#      - deploy-backend:
#          requires: [run-migrations]
#      - smoke-test:
#          requires: [deploy-backend, deploy-frontend]
#      - cloudfront-update:
#          requires: [smoke-test]
#      - cleanup:
#          requires: [cloudfront-update]
